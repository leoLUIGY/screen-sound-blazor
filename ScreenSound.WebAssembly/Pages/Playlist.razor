@page "/playlist"
@inject MusicasAPI musicasAPI
@inject IJSRuntime JS
@inject ILogger<Playlist> logger

<h2>Playlist</h2>

<div class="playlist-header d-flex align-items-center mb-4 p-3 bg-dark text-white rounded">
    <img src="images/cardArtista.png" class="playlist-cover me-4" alt="">
    <div>
        <h3 class="mb-1">Minha Playlist Favorita</h3>
        <p class="text-muted mb-2">Uma seleção das melhores músicas para você curtir!</p>
        <span class="badge bg-primary">Pública</span>
    </div>
</div>
@if (musicas != null)
{
    <div class="playlist-tracks bg-light rounded p-3">
        <table class="table table-hover align-middle mb-0">
            <thead>
                <tr>
                    <th></th>
                    <th>Número</th>
                    <th>Música</th>
                    <th>Artista</th>
                    <th>Ano Lançamento</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var musica in musicas)
                {
                    var isPlaying = musica.Id == musicaTocandoId;
                    <tr class="playlist-item @(isPlaying?"playing-row":null)" @onclick="() => AlternarPlay(musica.Id)">
                        <td>
                            <span class="bi fa-icon-playstop @(isPlaying ? "bi-stop-fill":"bi-play-fill")" />
                        </td>
                        <td>@musica.Id</td>
                        <td>@musica.Nome</td>
                        <td>@musica.NomeArtista</td>
                        <td>@musica.AnoLancamento</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
} 
else
{
    <p>Carregando...</p>
}

<script type="text/javascript">
    function scrollToElementByClass(className)
    {
        const offset = 200;
        const element = document.querySelector('.' + className);

        if (element) {
            const elementTop = element.getBoundingClientRect().top + window.pageYOffset;
            const scrollTo = elementTop - offset;
            window.scrollTo({ top: scrollTo, behavior: 'smooth' });

        }
    }
</script>

@code {
    private int? musicaTocandoId;
    private ICollection<MusicaResponse>? musicas;


    protected override async Task OnInitializedAsync()
    {
        logger.LogInformation("Iniciando o carregamento das musicas da API");

        try
        {
            musicas = await musicasAPI.GetMusicasAsync();
        }catch(Exception ex)
        {
            logger.LogError("Houve um erro:" + ex.Message);
            await JS.InvokeVoidAsync("alert", ex.Message);
        }

        if (musicas != null)
        {
            logger.LogInformation($"Carregadas {musicas.Count} musicas com sucesso.");
        }

    }

    private async Task AlternarPlay(int musicaId)
    {
        if (musicaTocandoId == musicaId)
        {
            musicaTocandoId = null;
            logger.LogInformation($"Música {musicaId} pausada.");
        }
        else
        {
            logger.LogInformation($"Iniciando musica {musicaId}.");
            musicaTocandoId = musicaId;

            await ScrollToMusicAsync();

            await Task.Delay(1200);

            if (musicaTocandoId == musicaId)
            {
                logger.LogInformation($"Passando para a proxima musica {musicaId}.");
                musicaId++;
                StateHasChanged();
                await AlternarPlay(musicaId);
            }
        }
    }

    private async Task ScrollToMusicAsync()
    {
        await JS.InvokeVoidAsync("scrollToElementByClass", "playing-row");
    }
}
